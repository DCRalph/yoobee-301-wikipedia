// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // provider = "sqlite"
    // url      = "file:./dev.db"
}

// ---------------------------------------------------------------------------
// NextAuth models for authentication
// ---------------------------------------------------------------------------
model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   
  access_token             String?   
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   
  session_state            String?
  refresh_token_expires_in Int?

  password                 String?

  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// ---------------------------------------------------------------------------
// Application models for the Wikipedia clone
// ---------------------------------------------------------------------------

/// Enum for defining user roles.
enum Role {
  USER
  MODERATOR
  ADMIN
}

/// The User model extends authentication properties and includes roles.
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  articles      Article[]    @relation("authorArticles")
  revisions     Revision[]   @relation("editorRevisions")
  // notes         Note[]       @relation("userNotes")
  approvedArticles Article[] @relation("approvedArticles")
  approvedRevisions Revision[] @relation("approvedRevisions")
}

/// Model to track IP address views for Articles
model ArticleView {
  id        String   @id @default(cuid())
  ip        String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([ip, articleId], name: "ip_articleId")
  @@index([ip])
  @@index([articleId])
  @@index([createdAt])
}

/// The Article model represents a Wikipedia-like article.
model Article {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  needsApproval Boolean   @default(true)
  approved    Boolean     @default(false)
  approvedAt  DateTime?
  approvedBy  String?
  approver    User?       @relation("approvedArticles", fields: [approvedBy], references: [id])

  imageUrl    String?
  
  // Featured article fields
  isFeatured  Boolean     @default(false)
  featuredAt  DateTime?
  featuredDescription String?
  
  // View tracking
  viewCount   Int         @default(0)
  dailyViews  Int         @default(0)
  lastViewReset DateTime  @default(now())
  views       ArticleView[]

  // Quick facts and metadata
  quickFacts  Json        @default("{}")
  sources     String      @default("")
  talkContent String      @default("")
  
  // NEW: Vector fields for embeddings
  // titleVector   Unsupported("vector(384)")?   // 384 dimensions for all-MiniLM-L6-v2
  // contentVector Unsupported("vector(384)")?
  vectorsGeneratedAt DateTime?                 // Track when vectors were created
  
  // Relations
  authorId    String
  author      User        @relation("authorArticles", fields: [authorId], references: [id])
  revisions   Revision[]  @relation("articleRevisions")
  summaries   ArticleSummary[]
  categories  CategoriesOnArticles[]

  // Existing indexes
  @@index([isFeatured, featuredAt])
  @@index([dailyViews])
  @@index([viewCount])
  @@index([published])
  @@index([slug])
  @@index([title])
  @@index([authorId])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([published, approved, needsApproval, createdAt])
  @@index([published, approved, needsApproval, createdAt, updatedAt])
  @@index([published, approved, needsApproval, createdAt, title, slug])
  @@index([isFeatured, published, approved, needsApproval])
  
  // NEW: Vector similarity indexes for fast similarity search
  // @@index([titleVector], map: "idx_article_title_vector", type: Gin)
  // @@index([contentVector], map: "idx_article_content_vector", type: Gin)
}

/// The Category model for organizing articles
model Category {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  imageUrl    String?
  
  // Hierarchical structure
  parentId    String?
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryHierarchy")
  
  // Relations
  articles    CategoriesOnArticles[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([parentId])
}

/// Junction table for many-to-many relationship between Articles and Categories
model CategoriesOnArticles {
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId   String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  assignedAt  DateTime  @default(now())

  @@id([articleId, categoryId])
  @@index([categoryId])
  @@index([articleId])
}

/// The HistoricalEvent model for "On This Day" feature
model HistoricalEvent {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime
  year        Int
  month       Int
  day         Int
  imageUrl    String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([month, day])
}

/// The Revision model represents an edit made to an article.
model Revision {
  id          String      @id @default(cuid())
  articleId   String
  editorId    String
  content     String      
  summary     String?
  createdAt   DateTime    @default(now())

  // New fields for tracking changes to additional content
  quickFacts  Json?       // Updated quick facts if changed in this revision
  sources     String?     // Updated sources if changed in this revision
  talkContent String?     // Updated talk content if changed in this revision
  
  needsApproval Boolean   @default(true)
  approved    Boolean     @default(false)
  approvedAt  DateTime?
  approvedBy  String?
  approver    User?       @relation("approvedRevisions", fields: [approvedBy], references: [id])

  checkedByAi Boolean @default(false)
  aiMessage String?

  article     Article     @relation("articleRevisions", fields: [articleId], references: [id], onDelete: Cascade)
  // Editor is the user who performed the edit.
  editor      User        @relation("editorRevisions", fields: [editorId], references: [id])
}

// /// The Note model represents additional content related to an article, such as AI summaries.
// model Note {
//   id          String      @id @default(cuid())
//   content     String
//   type        String      // e.g., "AI_SUMMARY", "USER_NOTE", etc.
//   createdAt   DateTime    @default(now())
  
//   // Relations
//   articleId   String
//   article     Article     @relation("articleNotes", fields: [articleId], references: [id])
  
//   userId      String
//   user        User        @relation("userNotes", fields: [userId], references: [id])
// }

/// The Setting model stores site-wide configuration settings
model Setting {
  id               String    @id @default(cuid())
  allowRegistration Boolean  @default(true)
  allowArticleCreation Boolean @default(true)
  enableAIFeatures Boolean @default(false)
  updatedAt        DateTime  @updatedAt
}

model ArticleSummary {
  id        String   @id @default(cuid())
  content   String   @db.Text
  level     String   // "original", "novice", "intermediate", "advanced"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String

  @@unique([articleId, level])
}