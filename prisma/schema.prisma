// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "postgresql"
    // url      = env("DATABASE_URL")
    provider = "sqlite"
    url      = "file:./dev.db"
}

// ---------------------------------------------------------------------------
// NextAuth models for authentication
// ---------------------------------------------------------------------------
model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   
  access_token             String?   
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   
  session_state            String?
  refresh_token_expires_in Int?

  password                 String?

  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// ---------------------------------------------------------------------------
// Application models for the Wikipedia clone
// ---------------------------------------------------------------------------

/// Enum for defining user roles.
enum Role {
  USER
  MODERATOR
  ADMIN
}

/// The User model extends authentication properties and includes roles.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  articles      Article[]    @relation("authorArticles")
  revisions     Revision[]   @relation("editorRevisions")
  notes         Note[]       @relation("userNotes")
  approvedArticles Article[] @relation("approvedArticles")
  approvedRevisions Revision[] @relation("approvedRevisions")
}

/// The Article model represents a Wikipedia-like article.
model Article {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  needsApproval Boolean   @default(true)
  approved    Boolean     @default(false)
  approvedAt  DateTime?
  approvedBy  String?
  approver    User?       @relation("approvedArticles", fields: [approvedBy], references: [id])

  // The user who originally authored/created the article.
  authorId    String
  author      User        @relation("authorArticles", fields: [authorId], references: [id])
  
  // Revisions history for the article.
  revisions   Revision[]
  
  // Notes related to the article (including AI summaries)
  notes       Note[]      @relation("articleNotes")
}

/// The Revision model represents an edit made to an article.
model Revision {
  id          String      @id @default(cuid())
  articleId   String
  editorId    String
  content     String      
  summary     String?
  createdAt   DateTime    @default(now())
  needsApproval Boolean   @default(true)
  approved    Boolean     @default(false)
  approvedAt  DateTime?
  approvedBy  String?
  approver    User?       @relation("approvedRevisions", fields: [approvedBy], references: [id])

  article     Article     @relation(fields: [articleId], references: [id])
  // Editor is the user who performed the edit.
  editor      User        @relation("editorRevisions", fields: [editorId], references: [id])
}

/// The Note model represents additional content related to an article, such as AI summaries.
model Note {
  id          String      @id @default(cuid())
  content     String
  type        String      // e.g., "AI_SUMMARY", "USER_NOTE", etc.
  createdAt   DateTime    @default(now())
  
  // Relations
  articleId   String
  article     Article     @relation("articleNotes", fields: [articleId], references: [id])
  
  userId      String
  user        User        @relation("userNotes", fields: [userId], references: [id])
}