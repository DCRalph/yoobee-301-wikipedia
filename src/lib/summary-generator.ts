/**
 * Utility functions for generating article summaries
 */

import { env } from "~/env";
import OpenAI from "openai";
import { db } from "~/server/db";

interface SummaryProps {
  content: string;
  level: "novice" | "intermediate" | "advanced";
}

function basicSummary({ content, level }: SummaryProps): string {
  // This is a simplified implementation
  // In a production environment, you would use an AI service like OpenAI

  // Split content into paragraphs
  const paragraphs = content.split("\n\n");

  // Extract first paragraph as intro
  const intro = paragraphs[0] ?? "";

  // Adjust summary based on level
  let keyPoints: string[] = [];
  let introLength = 0;
  let pointsCount = 0;

  switch (level) {
    case "novice":
      introLength = 100;
      pointsCount = 2;
      break;
    case "intermediate":
      introLength = 200;
      pointsCount = 3;
      break;
    case "advanced":
      introLength = 300;
      pointsCount = 5;
      break;
  }

  // Identify key points based on level
  keyPoints = paragraphs
    .filter((p) => p.length > 50 && p !== intro)
    .slice(0, pointsCount)
    .map(
      (p) =>
        p.substring(0, introLength / 2) +
        (p.length > introLength / 2 ? "..." : ""),
    );

  // Format the summary as markdown with level-appropriate language
  let title = "Summary";
  let footer = "*This is an AI-generated summary of the article.*";

  if (level === "advanced") {
    title = "Comprehensive Analysis";
    footer = "*This is a technical, in-depth analysis generated by AI.*";
  } else if (level === "novice") {
    title = "Simple Overview";
    footer = "*This is a simplified summary for beginners.*";
  }

  return `
## ${title}

${intro.substring(0, introLength)}${intro.length > introLength ? "..." : ""}

### Key Points

${keyPoints.map((point) => `- ${point}`).join("\n")}

${footer}
  `.trim();
}

/**
 * Advanced summary generation using OpenAI's GPT models
 * This function dynamically imports OpenAI to avoid TypeScript issues
 */
async function advancedSummary({
  content,
  level,
}: SummaryProps): Promise<string> {
  // Check if API key is available
  const apiKey = env.OPENAI_API_KEY;
  if (!apiKey) {
    console.warn("OpenAI API key not found. Falling back to basic summary.");
    return "AI Error: No API key found";
  }

  try {
    // Initialize the OpenAI client
    const openai = new OpenAI({
      apiKey,
    });

    // Prepare the prompt based on the comprehension level
    let prompt = "";

    switch (level) {
      case "novice":
        prompt = `Summarize the following text in simple terms for beginners. Use basic vocabulary and straightforward explanations. Include an introduction and 2-3 key points:`;
        break;
      case "intermediate":
        prompt = `Provide a balanced summary of the following text for readers with moderate knowledge. Include background context and 3-4 key points with some technical details:`;
        break;
      case "advanced":
        prompt = `Create a comprehensive technical analysis of the following text for advanced readers. Include in-depth explanations, nuanced details, and 4-5 sophisticated key points:`;
        break;
    }

    prompt += "\nAppend the Summarization level to the end of the response";

    prompt += `\n\n${content}`;

    // Call the OpenAI API
    const response = await openai.chat.completions.create({
      model: "gpt-4.1",
      messages: [
        {
          role: "system",
          content:
            "You are a helpful assistant that generates article summaries in markdown format. Your summaries should be well-structured with a title, introduction, key points, and a footer.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      temperature: 0.7,
      max_tokens: 10000,
    });

    // Extract the generated content safely
    const generatedContent = response.choices[0]?.message.content;

    if (!generatedContent) {
      return "AI Error: No content generated";
    }

    // Return the generated content or fall back to basic summary
    return generatedContent;
  } catch (error) {
    // Log the error safely
    console.error("Error generating AI summary:", error);

    // Fallback to basic summary if there's an error
    return "AI Error: No content generated";
  }
}

/**
 * Generates a summary from article content based on the specified comprehension level
 */
export async function generateSummary({
  content,
  level,
}: SummaryProps): Promise<string> {
  // return content;
  let UseAi = false;
  const setting = await db.setting.findFirst();

  if (setting?.enableAIFeatures) {
    UseAi = true;
  }

  if (UseAi) {
    const aiRes = await advancedSummary({ content, level });
    return aiRes;
  }

  // Fallback to basic summary
  return basicSummary({ content, level });
}
