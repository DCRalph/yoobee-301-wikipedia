import { z } from "zod";
import { createTRPCRouter, protectedProcedure, adminProcedure, publicProcedure } from "../trpc";
import { TRPCError } from "@trpc/server";

// Helper function to generate a summary from article content
function generateSummary(content: string, level: "novice" | "intermediate" | "advanced" = "intermediate"): string {
  // This is a simplified implementation
  // In a production environment, you would use an AI service like OpenAI

  // Split content into paragraphs
  const paragraphs = content.split("\n\n");

  // Extract first paragraph as intro
  const intro = paragraphs[0] || "";

  // Adjust summary based on level
  let keyPoints: string[] = [];
  let introLength = 0;
  let pointsCount = 0;

  switch (level) {
    case "novice":
      introLength = 100;
      pointsCount = 2;
      break;
    case "intermediate":
      introLength = 200;
      pointsCount = 3;
      break;
    case "advanced":
      introLength = 300;
      pointsCount = 5;
      break;
  }

  // Identify key points based on level
  keyPoints = paragraphs
    .filter((p) => p.length > 50 && p !== intro)
    .slice(0, pointsCount)
    .map((p) => p.substring(0, introLength / 2) + (p.length > introLength / 2 ? "..." : ""));

  // Format the summary as markdown with level-appropriate language
  let title = "Summary";
  let footer = "*This is an AI-generated summary of the article.*";

  if (level === "advanced") {
    title = "Comprehensive Analysis";
    footer = "*This is a technical, in-depth analysis generated by AI.*";
  } else if (level === "novice") {
    title = "Simple Overview";
    footer = "*This is a simplified summary for beginners.*";
  }

  return `
## ${title}

${intro.substring(0, introLength)}${intro.length > introLength ? "..." : ""}

### Key Points

${keyPoints.map((point) => `- ${point}`).join("\n")}

${footer}
  `.trim();
}

export const articlesRouter = createTRPCRouter({
  getAll: publicProcedure
    .input(
      z.object({
        limit: z.number().min(1).max(100).default(10),
        cursor: z.string().nullish(),
        filterPublished: z.boolean().optional(),
      }),
    )
    .query(async ({ ctx, input }) => {
      const { limit, cursor, filterPublished } = input;

      const where =
        filterPublished !== undefined
          ? { published: filterPublished }
          : undefined;

      const articles = await ctx.db.article.findMany({
        take: limit + 1,
        cursor: cursor ? { id: cursor } : undefined,
        orderBy: { updatedAt: "desc" },
        where,
        include: {
          author: {
            select: {
              id: true,
              name: true,
              image: true,
            },
          },
        },
      });

      let nextCursor: typeof cursor = undefined;
      if (articles.length > limit) {
        const nextItem = articles.pop();
        nextCursor = nextItem?.id;
      }

      return {
        articles,
        nextCursor,
      };
    }),

  getById: adminProcedure
    .input(z.object({ id: z.string() }))
    .query(async ({ ctx, input }) => {
      const article = await ctx.db.article.findUnique({
        where: { id: input.id },
        include: {
          author: {
            select: {
              id: true,
              name: true,
              image: true,
            },
          },
          revisions: {
            orderBy: { createdAt: "desc" },
            include: {
              editor: {
                select: {
                  id: true,
                  name: true,
                  image: true,
                },
              },
            },
          },
        },
      });

      if (!article) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Article not found",
        });
      }

      return article;
    }),

  getBySlug: publicProcedure
    .input(z.object({ slug: z.string() }))
    .query(async ({ ctx, input }) => {
      const article = await ctx.db.article.findUnique({
        where: { slug: input.slug },
        include: {
          author: {
            select: {
              id: true,
              name: true,
              image: true,
            },
          },
          revisions: {
            orderBy: { createdAt: "desc" },
            take: 10,
            include: {
              editor: {
                select: {
                  id: true,
                  name: true,
                  image: true,
                },
              },
            },
          },
        },
      });

      if (!article) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Article not found",
        });
      }

      return article;
    }),

  create: protectedProcedure
    .input(
      z.object({
        title: z.string().min(1).max(255),
        slug: z.string().min(1).max(255),
        content: z.string().min(1),
        published: z.boolean().default(false),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      // Check if slug already exists
      const existingArticle = await ctx.db.article.findUnique({
        where: { slug: input.slug },
      });

      if (existingArticle) {
        throw new TRPCError({
          code: "CONFLICT",
          message: "Slug already exists",
        });
      }

      const { session } = ctx;

      if (!session?.user?.id) {
        throw new TRPCError({
          code: "UNAUTHORIZED",
          message: "User not authenticated",
        });
      }

      return ctx.db.article.create({
        data: {
          title: input.title,
          slug: input.slug,
          content: input.content,
          published: input.published,
          author: {
            connect: { id: session.user.id },
          },
          revisions: {
            create: {
              content: input.content,
              summary: "Initial creation",
              editor: {
                connect: { id: session.user.id },
              },
            },
          },
        },
      });
    }),

  update: protectedProcedure
    .input(
      z.object({
        id: z.string(),
        title: z.string().min(1).max(255).optional(),
        slug: z.string().min(1).max(255).optional(),
        content: z.string().min(1).optional(),
        published: z.boolean().optional(),
        summary: z.string().optional(),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      // If slug is being updated, check if the new slug already exists
      if (input.slug) {
        const existingArticle = await ctx.db.article.findFirst({
          where: {
            slug: input.slug,
            id: { not: input.id },
          },
        });

        if (existingArticle) {
          throw new TRPCError({
            code: "CONFLICT",
            message: "Slug already exists",
          });
        }
      }

      const { session } = ctx;

      if (!session?.user?.id) {
        throw new TRPCError({
          code: "UNAUTHORIZED",
          message: "User not authenticated",
        });
      }

      // Get the current article to check for changes
      const currentArticle = await ctx.db.article.findUnique({
        where: { id: input.id },
        select: { content: true },
      });

      if (!currentArticle) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Article not found",
        });
      }

      // Create a new revision if content is changed
      let createRevision = false;
      if (input.content && input.content !== currentArticle.content) {
        createRevision = true;
      }

      // Update the article
      const article = await ctx.db.article.update({
        where: { id: input.id },
        data: {
          ...(input.title && { title: input.title }),
          ...(input.slug && { slug: input.slug }),
          ...(input.content && { content: input.content }),
          ...(input.published !== undefined && { published: input.published }),
          updatedAt: new Date(),
        },
      });

      // Create a revision if content changed
      if (createRevision && input.content) {
        await ctx.db.revision.create({
          data: {
            content: input.content,
            summary: input.summary ?? "Updated content",
            article: {
              connect: { id: input.id },
            },
            editor: {
              connect: { id: session.user.id },
            },
          },
        });
      }

      return article;
    }),

  delete: adminProcedure
    .input(z.object({ id: z.string() }))
    .mutation(async ({ ctx, input }) => {
      // Delete all revisions first
      await ctx.db.revision.deleteMany({
        where: { articleId: input.id },
      });

      // Then delete the article
      return ctx.db.article.delete({
        where: { id: input.id },
      });
    }),

  getRevisionById: publicProcedure
    .input(z.object({ revisionId: z.string() }))
    .query(async ({ ctx, input }) => {
      const revision = await ctx.db.revision.findUnique({
        where: { id: input.revisionId },
        include: {
          article: {
            select: {
              id: true,
              title: true,
              slug: true,
              published: true,
            },
          },
          editor: {
            select: {
              id: true,
              name: true,
              image: true,
            },
          },
        },
      });

      if (!revision) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Revision not found",
        });
      }

      return revision;
    }),

  compareRevisions: publicProcedure
    .input(z.object({
      currentRevisionId: z.string(),
      oldRevisionId: z.string()
    }))
    .query(async ({ ctx, input }) => {
      // Fetch both revisions
      const [currentRevision, oldRevision] = await Promise.all([
        ctx.db.revision.findUnique({
          where: { id: input.currentRevisionId },
          include: {
            article: {
              select: {
                id: true,
                title: true,
                slug: true,
              },
            },
            editor: {
              select: {
                id: true,
                name: true,
                image: true,
              },
            },
          },
        }),
        ctx.db.revision.findUnique({
          where: { id: input.oldRevisionId },
          include: {
            editor: {
              select: {
                id: true,
                name: true,
                image: true,
              },
            },
          },
        }),
      ]);

      if (!currentRevision || !oldRevision) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "One or both revisions not found",
        });
      }

      // Make sure both revisions belong to the same article
      if (currentRevision.articleId !== oldRevision.articleId) {
        throw new TRPCError({
          code: "BAD_REQUEST",
          message: "Cannot compare revisions from different articles",
        });
      }

      return {
        currentRevision,
        oldRevision,
        article: currentRevision.article,
      };
    }),

  summarize: protectedProcedure
    .input(
      z.object({
        articleId: z.string(),
        level: z.enum(["novice", "intermediate", "advanced"]).default("intermediate"),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      const article = await ctx.db.article.findUnique({
        where: { id: input.articleId },
        select: {
          id: true,
          title: true,
          content: true,
        },
      });

      if (!article) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Article not found",
        });
      }

      // Generate summary based on the selected level
      const summary = generateSummary(article.content, input.level);

      return {
        summary,
      };
    }),

  saveSummary: protectedProcedure
    .input(
      z.object({
        articleId: z.string(),
        summary: z.string(),
        level: z.enum(["novice", "intermediate", "advanced"]).default("intermediate"),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      const { session } = ctx;

      if (!session?.user?.id) {
        throw new TRPCError({
          code: "UNAUTHORIZED",
          message: "User not authenticated",
        });
      }

      const article = await ctx.db.article.findUnique({
        where: { id: input.articleId },
      });

      if (!article) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Article not found",
        });
      }

      // // For now, just return a success message
      // // In a production environment, after running migrations to create the Note model,
      // // you would save the summary to the database
      // return {
      //   success: true,
      //   message: "Summary successfully generated. Run database migrations to enable saving summaries."
      // };

      // After running migrations and generating Prisma client, you can uncomment the code below:

      const note = await ctx.db.note.create({
        data: {
          content: input.summary,
          type: `AI_SUMMARY_${input.level.toUpperCase()}`,
          article: {
            connect: { id: input.articleId },
          },
          user: {
            connect: { id: session.user.id },
          },
        },
      });

      return { success: true, note };

    }),

  getNotes: protectedProcedure
    .input(
      z.object({
        limit: z.number().min(1).max(100).default(50),
        cursor: z.string().nullish(),
      }),
    )
    .query(async ({ ctx, input }) => {
      const { limit, cursor } = input;
      const { session } = ctx;

      if (!session?.user?.id) {
        throw new TRPCError({
          code: "UNAUTHORIZED",
          message: "User not authenticated",
        });
      }

      const notes = await ctx.db.note.findMany({
        take: limit + 1,
        cursor: cursor ? { id: cursor } : undefined,
        where: {
          userId: session.user.id,
        },
        orderBy: { createdAt: "desc" },
        include: {
          article: {
            select: {
              id: true,
              title: true,
              slug: true,
            },
          },
        },
      });

      let nextCursor: typeof cursor = undefined;
      if (notes.length > limit) {
        const nextItem = notes.pop();
        nextCursor = nextItem?.id;
      }

      return {
        notes,
        nextCursor,
      };
    }),

  // Delete a note
  deleteNote: protectedProcedure
    .input(z.object({ id: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const { session } = ctx;

      if (!session?.user?.id) {
        throw new TRPCError({
          code: "UNAUTHORIZED",
          message: "User not authenticated",
        });
      }

      // Check if the note belongs to the user
      const note = await ctx.db.note.findUnique({
        where: { id: input.id },
      });

      if (!note) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Note not found",
        });
      }

      if (note.userId !== session.user.id) {
        throw new TRPCError({
          code: "FORBIDDEN",
          message: "You do not have permission to delete this note",
        });
      }

      // Delete the note
      await ctx.db.note.delete({
        where: { id: input.id },
      });

      return { success: true };
    }),
});
